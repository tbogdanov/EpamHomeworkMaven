package org.tbogdanov.epamhw.module2;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.tbogdanov.epamhw.module2.officesupplies.properties.Color;
import org.tbogdanov.epamhw.module2.officesupplies.properties.Manufacturer;
import org.tbogdanov.epamhw.module2.officesupplies.properties.Message;
import org.tbogdanov.epamhw.module2.officesupplies.supplies.Paper;
import org.tbogdanov.epamhw.module2.officesupplies.supplies.Pen;

import java.util.stream.Stream;

/**
 * Created by Timur Bogdanov on 10.04.18.
 */
public class PenTest {

    private Pen pen;

    @BeforeEach
    public void init() {
        pen = new Pen(Manufacturer.ERICH_KRAUSE, "Golden Pen", Color.BLUE);
    }

    public static Stream<Pen> inequalPenArgumentStream() {
        return Stream.of(new Pen(Manufacturer.BIC, "Golden Pen", Color.BLUE),
                new Pen(Manufacturer.ERICH_KRAUSE, "Silver Pen", Color.BLUE),
                new Pen(Manufacturer.ERICH_KRAUSE, "Golden Pen", Color.BLACK));
    }

    @Test
    public void writeOnTest() {
        Paper paper = new Paper(Manufacturer.ERICH_KRAUSE, 1);
        pen.writeOnPaper(paper, "Hello World!");
        Message msg = paper.getMessage(0);
        assertEquals("Blue pen writes: Hello World!", msg.toString());
    }

    @Test
    public void equalsTest() {
        Pen samePen = new Pen(Manufacturer.ERICH_KRAUSE, "Golden Pen", Color.BLUE);
        assertTrue(pen.equals(samePen));
    }

    @Test
    public void copiedEqualsTest() {
        Pen copiedPen = new Pen(pen);
        assertTrue(pen.equals(copiedPen));
    }

    @ParameterizedTest
    @MethodSource(names = "inequalPenArgumentStream")
    public void equalsTestForInequal(Pen inequalPen) {
        assertFalse(pen.equals(inequalPen));
    }

    @Test
    public void hashCodeEqualityForEqualTest() {
        Pen copiedPen = new Pen(pen);
        int penHashCode = pen.hashCode();
        int copiedPenHashCode = copiedPen.hashCode();
        assertEquals(penHashCode, copiedPenHashCode);
    }

    @ParameterizedTest
    @MethodSource(names = "inequalPenArgumentStream")
    public void hashCodeInequalityForInequalTest(Pen inequalPen) {
        assertFalse(pen.hashCode() == inequalPen.hashCode());
    }

    @Test
    public void toStringTest() {
        assertEquals("Pen Erich Krause Golden Pen (Blue)", pen.toString());
    }
}
